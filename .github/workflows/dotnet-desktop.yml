# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on: push

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Compile
      run: |
        git describe --tags --always | Tee-Object -Variable GIT_VERSION
        git describe --tags --always --abbrev=0 | Tee-Object -Variable GIT_LAST_TAG
        dotnet publish -r win-x64 -c Release -p:DebugType=None -p:DebugSymbols=false -p:Version=${GIT_LAST_TAG} -p:AssemblyVersion=${GIT_LAST_TAG} -p:InformationalVersion=${GIT_LAST_TAG}

    # Create dist folders
    - name: Create distribution folders
      run: |
        git describe --tags --always | Tee-Object -Variable GIT_VERSION
        git describe --tags --always --abbrev=0 | Tee-Object -Variable GIT_LAST_TAG
        New-Item -ItemType Directory -Path dist\quickwarden-${GIT_VERSION}-windows-x64 -Force
        New-Item -ItemType Directory -Path dist\quickwarden-${GIT_VERSION}-windows-x64-no-bw-cli -Force
        cp src\Quickwarden.UI\bin\Release\net9.0\win-x64\publish\* dist\quickwarden-${GIT_VERSION}-windows-x64\
        cp src\Quickwarden.UI\bin\Release\net9.0\win-x64\publish\* dist\quickwarden-${GIT_VERSION}-windows-x64-no-bw-cli\
        cp LICENSE.txt dist\quickwarden-${GIT_VERSION}-windows-x64\
        cp LICENSE-BW.txt dist\quickwarden-${GIT_VERSION}-windows-x64\
        cp LICENSE.txt dist\quickwarden-${GIT_VERSION}-windows-x64-no-bw-cli\

    # Download Bitwarden CLI
    - name: Download Bitwarden CLI
      run: |
        git describe --tags --always | Tee-Object -Variable GIT_VERSION
        git describe --tags --always --abbrev=0 | Tee-Object -Variable GIT_LAST_TAG
        cd dist\quickwarden-${GIT_VERSION}-windows-x64\
        $ProgressPreference = 'SilentlyContinue'
        curl -o bw.zip "https://github.com/bitwarden/clients/releases/download/cli-v2025.4.0/bw-oss-windows-2025.4.0.zip"
        C:\Windows\System32\tar.exe -xf bw.zip
        Remove-Item bw.zip
        cd ..\..\

    # Sign binaries
    - name: Sign binaries
      uses: skymatic/code-sign-action@v1
      with:
        certificate: '${{ secrets.CERTIFICATE }}'
        password: '${{ secrets.PASSWORD }}'
        certificatesha1: '${{ secrets.CERTHASH }}'
        certificatename: '${{ secrets.CERTNAME }}'
        timestampUrl: 'http://timestamp.digicert.com'
        folder: dist
        recursive: true

    # Create installer
    - name: Create installer
      run: |
        git describe --tags --always | Tee-Object -Variable GIT_VERSION
        git describe --tags --always --abbrev=0 | Tee-Object -Variable GIT_LAST_TAG
        $ProgressPreference = 'SilentlyContinue'
        Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "is.exe"
        Start-Process -FilePath ".\is.exe" -ArgumentList "/VERYSILENT" -Wait
        rm is.exe
        & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' "/DMyAppVersion=`"${GIT_VERSION}`"" "/DMyAppSourceDir=`"${PWD}\dist\quickwarden-${GIT_VERSION}-windows-x64`"" "/DMyAppSetupFileNameBase=`"quickwarden-${GIT_VERSION}-windows-x64-setup`"" "/DMyAppLicenseFile=`"${PWD}\dist\quickwarden-${GIT_VERSION}-windows-x64\LICENSE.txt`"" "/DMyAppSetupOutputDir=`"${PWD}\dist`"" scripts\build-installer.iss
        & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' "/DMyAppVersion=`"${GIT_VERSION}`"" "/DMyAppSourceDir=`"${PWD}\dist\quickwarden-${GIT_VERSION}-windows-x64-no-bw-cli`"" "/DMyAppSetupFileNameBase=`"quickwarden-${GIT_VERSION}-windows-x64-no-bw-cli-setup`"" "/DMyAppLicenseFile=`"${PWD}\dist\quickwarden-${GIT_VERSION}-windows-x64-no-bw-cli\LICENSE.txt`"" "/DMyAppSetupOutputDir=`"${PWD}\dist`"" scripts\build-installer.iss

    # Sign installer
    - name: Sign installer
      uses: skymatic/code-sign-action@v3
      with:
        certificate: '${{ secrets.CERTIFICATE }}'
        password: '${{ secrets.PASSWORD }}'
        certificatename: '${{ secrets.CERTNAME }}'
        timestampUrl: 'http://timestamp.digicert.com'
        folder: dist
        recursive: false

    # ZIP binary distributions
    - name: ZIP binary distributions
      run: |
        git describe --tags --always | Tee-Object -Variable GIT_VERSION
        git describe --tags --always --abbrev=0 | Tee-Object -Variable GIT_LAST_TAG
        cd dist
        C:\Windows\System32\tar.exe -a -c -f quickwarden-${GIT_VERSION}-windows-x64.zip quickwarden-${GIT_VERSION}-windows-x64
        C:\Windows\System32\tar.exe -a -c -f quickwarden-${GIT_VERSION}-windows-x64-no-bw-cli.zip quickwarden-${GIT_VERSION}-windows-x64-no-bw-cli
        Remove-Item quickwarden-${GIT_VERSION}-windows-x64 -Recurse -Force
        Remove-Item quickwarden-${GIT_VERSION}-windows-x64-no-bw-cli -Recurse -Force
        cd ..

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Windows distribution
        path: dist
